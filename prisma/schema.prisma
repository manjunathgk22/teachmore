generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String          // e.g., "2023-2024 Fall Term"
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model AcademicClass {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  sessionId   String     @db.ObjectId
  grade       String     // e.g., "Grade 1"
  subjects    String[]   // Subjects offered in this class
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Section {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  academicClassId String   @db.ObjectId
  name            String   // e.g., "Section A"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User User[]
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  passwordHash String
  name         String
  role         String   // e.g., "student", "teacher", "admin"
  section      Section? @relation(fields: [sectionId], references: [id])
  sectionId    String?  @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdBy     String   // User ID
  grade         String   // Matches AcademicClass.grade
  subject       String
  type          String   // e.g., "MCQ", "True/False"
  questionText  String
  options       String[]
  correctAnswer String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Test {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  createdBy       String        // User ID
  academicClassId String        @db.ObjectId
  subject         String
  questionIds     String[]      @db.ObjectId
  scheduledAt     DateTime
  timeLimit       Int           // Minutes
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  testId      String   @db.ObjectId
  studentId   String   @db.ObjectId
  submittedAt DateTime
  graded      Boolean  @default(false)
  score       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Answer {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  submissionId String     @db.ObjectId
  questionId   String     @db.ObjectId
  answer       String
}